-- Table for SubSection
CREATE TABLE SubSection (
    subsection_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(255),
    time_duration VARCHAR2(50),
    description VARCHAR2(4000),
    video_url VARCHAR2(255)
);

-- Table for Section
CREATE TABLE Section (
    section_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    section_name VARCHAR2(255)
);

-- Table for CourseProgress
CREATE TABLE CourseProgress (
    course_progress_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_id NUMBER,
    user_id NUMBER,
    CONSTRAINT fk_course FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Associative table for CourseProgress and SubSection (Many-to-Many)
CREATE TABLE CourseProgress_SubSection (
    course_progress_id NUMBER,
    subsection_id NUMBER,
    PRIMARY KEY (course_progress_id, subsection_id),
    CONSTRAINT fk_course_progress FOREIGN KEY (course_progress_id) REFERENCES CourseProgress(course_progress_id),
    CONSTRAINT fk_progress_subsection FOREIGN KEY (subsection_id) REFERENCES SubSection(subsection_id)
);

-- Table for User
CREATE TABLE Users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(255) NOT NULL,
    last_name VARCHAR2(255) NOT NULL,
    email VARCHAR2(255) NOT NULL,
    password VARCHAR2(255) NOT NULL,
    account_type VARCHAR2(50) CHECK (account_type IN ('Admin', 'Student', 'Instructor')),
    active CHAR(1) DEFAULT '1',
    approved CHAR(1) DEFAULT '1',
    additional_details NUMBER,
    token VARCHAR2(255),
    reset_password_expires TIMESTAMP,
    image VARCHAR2(255) NOT NULL,
    CONSTRAINT fk_additional_details FOREIGN KEY (additional_details) REFERENCES Profile(profile_id)
);

-- Associative table for User and Course (Many-to-Many)
CREATE TABLE User_Course (
    user_id NUMBER,
    course_id NUMBER,
    PRIMARY KEY (user_id, course_id),
    CONSTRAINT fk_user_course_user FOREIGN KEY (user_id) REFERENCES Users(user_id),
    CONSTRAINT fk_user_course_course FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Associative table for User and CourseProgress (Many-to-Many)
CREATE TABLE User_CourseProgress (
    user_id NUMBER,
    course_progress_id NUMBER,
    PRIMARY KEY (user_id, course_progress_id),
    CONSTRAINT fk_user_course_progress_user FOREIGN KEY (user_id) REFERENCES Users(user_id),
    CONSTRAINT fk_user_course_progress_course FOREIGN KEY (course_progress_id) REFERENCES CourseProgress(course_progress_id)
);

-- Table for Category
CREATE TABLE Category (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255) NOT NULL,
    description VARCHAR2(4000)
);

-- Associative table for Category and Course (Many-to-Many)
CREATE TABLE Category_Course (
    category_id NUMBER,
    course_id NUMBER,
    PRIMARY KEY (category_id, course_id),
    CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES Category(category_id),
    CONSTRAINT fk_category_course FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Table for Profile
CREATE TABLE Profile (
    profile_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    gender VARCHAR2(50),
    date_of_birth DATE,
    about VARCHAR2(4000),
    contact_number VARCHAR2(50)
);

-- Table for OTP
CREATE TABLE OTP (
    otp_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR2(255) NOT NULL,
    otp VARCHAR2(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP GENERATED ALWAYS AS (created_at + INTERVAL '5' MINUTE)
);

-- Table for Courses
CREATE TABLE Courses (
    course_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_name VARCHAR2(255),
    course_description VARCHAR2(4000),
    instructor NUMBER NOT NULL,
    what_you_will_learn VARCHAR2(4000),
    price NUMBER,
    thumbnail VARCHAR2(255),
    status VARCHAR2(10) CHECK (status IN ('Draft', 'Published')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    category NUMBER,
    CONSTRAINT fk_instructor FOREIGN KEY (instructor) REFERENCES Users(user_id),
    CONSTRAINT fk_category FOREIGN KEY (category) REFERENCES Category(category_id)
);

-- Associative table for Course and Section (Many-to-Many)
CREATE TABLE Course_Section (
    course_id NUMBER,
    section_id NUMBER,
    PRIMARY KEY (course_id, section_id),
    CONSTRAINT fk_course_section_course FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    CONSTRAINT fk_course_section_section FOREIGN KEY (section_id) REFERENCES Section(section_id)
);

-- Associative table for Course and RatingAndReview (Many-to-Many)
CREATE TABLE Course_RatingAndReview (
    course_id NUMBER,
    rating_and_review_id NUMBER,
    PRIMARY KEY (course_id, rating_and_review_id),
    CONSTRAINT fk_course_rating_review_course FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    CONSTRAINT fk_course_rating_review_rating FOREIGN KEY (rating_and_review_id) REFERENCES RatingAndReview(rating_and_review_id)
);

-- Associative table for Course and StudentsEnrolled (Many-to-Many)
CREATE TABLE Course_StudentsEnrolled (
    course_id NUMBER,
    student_id NUMBER,
    PRIMARY KEY (course_id, student_id),
    CONSTRAINT fk_course_students_enrolled_course FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    CONSTRAINT fk_course_students_enrolled_student FOREIGN KEY (student_id) REFERENCES Users(user_id)
);

-- Associative table for Course and Instructions (Many-to-Many)
CREATE TABLE Course_Instructions (
    course_id NUMBER,
    instruction VARCHAR2(4000),
    PRIMARY KEY (course_id, instruction),
    CONSTRAINT fk_course_instructions_course FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Associative table for Course and Tags (Many-to-Many)
CREATE TABLE Course_Tags (
    course_id NUMBER,
    tag VARCHAR2(255),
    PRIMARY KEY (course_id, tag),
    CONSTRAINT fk_course_tags_course FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
